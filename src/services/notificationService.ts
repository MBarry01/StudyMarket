import { addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { db } from '../lib/firebase';
import toast from 'react-hot-toast';

export interface CreateNotificationParams {
  userId: string;
  type: 'message' | 'listing' | 'order' | 'verification' | 'system' | 'review' | 'safety';
  title: string;
  message: string;
  data?: {
    url?: string;
    listingId?: string;
    orderId?: string;
    conversationId?: string;
    [key: string]: any;
  };
  priority?: 'high' | 'normal' | 'low';
}

/**
 * Service de notifications pour cr√©er automatiquement des notifications
 * selon les actions des utilisateurs et admins
 */
export class NotificationService {
  /**
   * Cr√©er une notification dans Firestore
   */
  private static async createNotification(params: CreateNotificationParams) {
    try {
      const notificationData = {
        userId: params.userId,
        type: params.type,
        title: params.title,
        message: params.message,
        data: params.data || {},
        read: false,
        priority: params.priority || 'normal',
        createdAt: serverTimestamp(),
        expiresAt: null as any
      };

      const docRef = await addDoc(collection(db, 'notifications'), notificationData);
      console.log(`‚úÖ Notification cr√©√©e: ${docRef.id}`);
      
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation notification:', error);
      throw error;
    }
  }

  /**
   * üìã Notification: Annonce soumise et en attente de validation
   */
  static async notifyListingPending(
    userId: string,
    listingId: string,
    listingTitle: string
  ) {
    return await this.createNotification({
      userId,
      type: 'listing',
      title: 'üìã Annonce en attente de validation',
      message: `Votre annonce "${listingTitle}" a √©t√© soumise et sera publi√©e apr√®s approbation.`,
      data: { url: `/listing/${listingId}`, listingId },
      priority: 'normal'
    });
  }

  /**
   * üõ°Ô∏è Notification: Nouvelle annonce √† valider (diffusion admins)
   * Note: En l'absence d'un syst√®me de r√¥les complet, on envoie sur un userId "admin_broadcast".
   * Les apps admin peuvent √©couter ce canal et redistribuer si n√©cessaire.
   */
  static async notifyAdminNewListing(
    listingId: string,
    listingTitle: string,
    sellerName: string
  ) {
    const adminBroadcastUserId = 'admin_broadcast';
    return await this.createNotification({
      userId: adminBroadcastUserId,
      type: 'listing',
      title: 'üõ°Ô∏è Nouvelle annonce √† valider',
      message: `${sellerName} a cr√©√© "${listingTitle}"`,
      data: { url: `/admin/listings?highlight=${listingId}`, listingId },
      priority: 'high'
    });
  }

  /**
   * ‚úÖ Notification: Annonce approuv√©e
   */
  static async notifyListingApproved(
    userId: string,
    listingId: string,
    listingTitle: string
  ) {
    return await this.createNotification({
      userId,
      type: 'listing',
      title: '‚úÖ Annonce approuv√©e',
      message: `Votre annonce "${listingTitle}" est maintenant visible publiquement.`,
      data: { url: `/listing/${listingId}`, listingId },
      priority: 'high'
    });
  }

  /**
   * ‚ùå Notification: Annonce refus√©e
   */
  static async notifyListingRejected(
    userId: string,
    listingId: string,
    listingTitle: string,
    reason?: string
  ) {
    return await this.createNotification({
      userId,
      type: 'listing',
      title: '‚ùå Annonce refus√©e',
      message: reason ? `"${listingTitle}" a √©t√© refus√©e: ${reason}` : `"${listingTitle}" a √©t√© refus√©e.`,
      data: { url: `/listing/${listingId}`, listingId },
      priority: 'normal'
    });
  }

  /**
   * üí¨ Notification : Nouveau message re√ßu
   */
  static async notifyNewMessage(
    recipientUserId: string,
    senderName: string,
    listingTitle: string,
    conversationId: string
  ) {
    return await this.createNotification({
      userId: recipientUserId,
      type: 'message',
      title: `üí¨ Message de ${senderName}`,
      message: `Nouveau message concernant "${listingTitle}"`,
      data: {
        url: `/messages?conversation=${conversationId}`,
        conversationId
      },
      priority: 'high'
    });
  }

  /**
   * üìù Notification : Nouvelle annonce correspond √† votre recherche
   */
  static async notifyNewListingMatch(
    userId: string,
    listingId: string,
    listingTitle: string,
    listingCategory: string
  ) {
    return await this.createNotification({
      userId,
      type: 'listing',
      title: `üîç Nouvelle annonce correspondant √† votre recherche`,
      message: `${listingTitle} (${listingCategory})`,
      data: {
        url: `/listing/${listingId}`,
        listingId
      },
      priority: 'normal'
    });
  }

  /**
   * üõí Notification : Nouvelle commande
   */
  static async notifyNewOrder(
    sellerUserId: string,
    orderId: string,
    listingTitle: string,
    buyerName: string
  ) {
    return await this.createNotification({
      userId: sellerUserId,
      type: 'order',
      title: `üõí Nouvelle commande`,
      message: `${buyerName} a achet√© "${listingTitle}"`,
      data: {
        url: `/orders/${orderId}`,
        orderId
      },
      priority: 'high'
    });
  }

  /**
   * üì¶ Notification : Changement de statut de commande
   */
  static async notifyOrderStatusChange(
    userId: string,
    orderId: string,
    status: string,
    listingTitle: string
  ) {
    const statusLabels: Record<string, string> = {
      'pending': '‚è≥ En attente',
      'confirmed': '‚úÖ Confirm√©e',
      'shipped': 'üì¶ Exp√©di√©e',
      'delivered': 'üéâ Livr√©e',
      'cancelled': '‚ùå Annul√©e'
    };

    return await this.createNotification({
      userId,
      type: 'order',
      title: `üì¶ Statut de commande mis √† jour`,
      message: `Votre commande "${listingTitle}" est maintenant ${statusLabels[status] || status}`,
      data: {
        url: `/orders/${orderId}`,
        orderId
      },
      priority: 'normal'
    });
  }

  /**
   * ‚úÖ Notification : Document de v√©rification approuv√©
   */
  static async notifyVerificationApproved(userId: string) {
    return await this.createNotification({
      userId,
      type: 'verification',
      title: `üéâ Votre compte est v√©rifi√© !`,
      message: `F√©licitations ! Vous √™tes maintenant un √©tudiant certifi√©.`,
      data: {
        url: '/profile'
      },
      priority: 'high'
    });
  }

  /**
   * ‚ùå Notification : Document de v√©rification rejet√©
   */
  static async notifyVerificationRejected(userId: string, reason?: string) {
    return await this.createNotification({
      userId,
      type: 'verification',
      title: `‚ùå Demande de v√©rification rejet√©e`,
      message: reason || `Votre demande a √©t√© rejet√©e. Veuillez r√©essayer.`,
      data: {
        url: '/verification'
      },
      priority: 'high'
    });
  }

  /**
   * ‚öôÔ∏è Notification : Changement de statut de v√©rification
   */
  static async notifyVerificationStatusChange(
    userId: string,
    status: string
  ) {
    const statusLabels: Record<string, string> = {
      'pending': 'üìã En attente',
      'under_review': 'üëÄ En cours de revue',
      'approved': '‚úÖ Approuv√©e',
      'rejected': '‚ùå Rejet√©e'
    };

    return await this.createNotification({
      userId,
      type: 'verification',
      title: `üîÑ Statut de v√©rification mis √† jour`,
      message: `Votre demande est maintenant ${statusLabels[status] || status}`,
      data: {
        url: '/verification'
      },
      priority: 'normal'
    });
  }

  /**
   * ‚≠ê Notification : Nouvel avis re√ßu
   */
  static async notifyNewReview(
    userId: string,
    reviewerName: string,
    rating: number
  ) {
    return await this.createNotification({
      userId,
      type: 'review',
      title: `‚≠ê Nouvel avis de ${reviewerName}`,
      message: `Vous avez re√ßu ${rating} √©toile${rating > 1 ? 's' : ''}`,
      data: {
        url: '/profile'
      },
      priority: 'normal'
    });
  }

  /**
   * üö® Notification : Rapport de s√©curit√©
   */
  static async notifySafetyReport(
    userId: string,
    reportType: string,
    listingTitle?: string
  ) {
    return await this.createNotification({
      userId,
      type: 'safety',
      title: `üö® Rapport de s√©curit√©`,
      message: `Un rapport a √©t√© cr√©√© concernant ${listingTitle || 'votre compte'}`,
      data: {
        url: '/reports'
      },
      priority: 'high'
    });
  }

  /**
   * üì¢ Notification : Annonce administrative
   */
  static async notifySystemAnnouncement(
    userId: string,
    title: string,
    message: string,
    url?: string
  ) {
    return await this.createNotification({
      userId,
      type: 'system',
      title: `üì¢ ${title}`,
      message,
      data: {
        url: url || '/'
      },
      priority: 'normal'
    });
  }

  /**
   * üí∞ Notification : Paiement re√ßu
   */
  static async notifyPaymentReceived(
    userId: string,
    amount: number,
    orderId: string
  ) {
    return await this.createNotification({
      userId,
      type: 'order',
      title: `üí∞ Paiement re√ßu`,
      message: `Vous avez re√ßu ${amount}‚Ç¨ pour votre commande`,
      data: {
        url: `/orders/${orderId}`,
        orderId
      },
      priority: 'high'
    });
  }

  /**
   * üìâ Notification : Changement de prix
   */
  static async notifyPriceDrop(
    userId: string,
    listingId: string,
    listingTitle: string,
    newPrice: number,
    oldPrice: number
  ) {
    const discount = ((oldPrice - newPrice) / oldPrice * 100).toFixed(0);
    
    return await this.createNotification({
      userId,
      type: 'listing',
      title: `üìâ R√©duction de ${discount}% !`,
      message: `${listingTitle} est maintenant √† ${newPrice}‚Ç¨ (au lieu de ${oldPrice}‚Ç¨)`,
      data: {
        url: `/listing/${listingId}`,
        listingId
      },
      priority: 'normal'
    });
  }

  /**
   * üéÅ Notification : Offre sp√©ciale
   */
  static async notifySpecialOffer(
    userId: string,
    listingId: string,
    listingTitle: string,
    offer: string
  ) {
    return await this.createNotification({
      userId,
      type: 'listing',
      title: `üéÅ Offre sp√©ciale !`,
      message: `${listingTitle}: ${offer}`,
      data: {
        url: `/listing/${listingId}`,
        listingId
      },
      priority: 'normal'
    });
  }
}
