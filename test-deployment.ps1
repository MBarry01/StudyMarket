# Script de test des corrections d√©ploy√©es
# √Ä ex√©cuter apr√®s avoir d√©ploy√© les corrections

Write-Host "üß™ Test des Corrections StudyMarket" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green

# Variables de test
$firebaseProject = "annonces-app-44d27"
$testResults = @{
    Firebase = $false
    Supabase = $false
    Performance = $false
    Validation = $false
}

# Test 1: V√©rifier Firebase CLI
Write-Host "`nüìä Test 1: V√©rification Firebase CLI..." -ForegroundColor Yellow
try {
    $firebaseVersion = firebase --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Firebase CLI install√©: $firebaseVersion" -ForegroundColor Green
        $testResults.Firebase = $true
    } else {
        Write-Host "‚ùå Firebase CLI non install√©" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Firebase CLI non trouv√©" -ForegroundColor Red
}

# Test 2: V√©rifier la connexion Firebase
Write-Host "`nüîó Test 2: Connexion Firebase..." -ForegroundColor Yellow
try {
    $firebaseProjects = firebase projects:list 2>$null
    if ($LASTEXITCODE -eq 0) {
        if ($firebaseProjects -match $firebaseProject) {
            Write-Host "‚úÖ Projet Firebase trouv√©: $firebaseProject" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Projet Firebase non trouv√©: $firebaseProject" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå Non connect√© √† Firebase" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur de connexion Firebase" -ForegroundColor Red
}

# Test 3: V√©rifier les index Firebase
Write-Host "`nüìã Test 3: V√©rification des index Firebase..." -ForegroundColor Yellow
try {
    $indexes = firebase firestore:indexes 2>$null
    if ($LASTEXITCODE -eq 0) {
        $requiredIndexes = @(
            "conversations",
            "messages", 
            "favorites",
            "orders"
        )
        
        $foundIndexes = 0
        foreach ($index in $requiredIndexes) {
            if ($indexes -match $index) {
                $foundIndexes++
                Write-Host "‚úÖ Index trouv√©: $index" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Index manquant: $index" -ForegroundColor Red
            }
        }
        
        if ($foundIndexes -eq $requiredIndexes.Count) {
            Write-Host "‚úÖ Tous les index sont pr√©sents" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è $foundIndexes/$($requiredIndexes.Count) index trouv√©s" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå Impossible de r√©cup√©rer les index" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification des index" -ForegroundColor Red
}

# Test 4: V√©rifier Supabase CLI
Write-Host "`nüìß Test 4: V√©rification Supabase CLI..." -ForegroundColor Yellow
try {
    $supabaseVersion = supabase --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Supabase CLI install√©: $supabaseVersion" -ForegroundColor Green
        $testResults.Supabase = $true
    } else {
        Write-Host "‚ùå Supabase CLI non install√©" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Supabase CLI non trouv√©" -ForegroundColor Red
}

# Test 5: V√©rifier les fichiers de correction
Write-Host "`nüìÅ Test 5: V√©rification des fichiers de correction..." -ForegroundColor Yellow
$requiredFiles = @(
    "src/lib/validations.ts",
    "firestore.indexes.json",
    "GUIDE-DEPLOIEMENT-CORRECTIONS.md"
)

$foundFiles = 0
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ Fichier trouv√©: $file" -ForegroundColor Green
        $foundFiles++
    } else {
        Write-Host "‚ùå Fichier manquant: $file" -ForegroundColor Red
    }
}

if ($foundFiles -eq $requiredFiles.Count) {
    Write-Host "‚úÖ Tous les fichiers de correction sont pr√©sents" -ForegroundColor Green
    $testResults.Validation = $true
} else {
    Write-Host "‚ö†Ô∏è $foundFiles/$($requiredFiles.Count) fichiers trouv√©s" -ForegroundColor Yellow
}

# Test 6: V√©rifier les modifications des stores
Write-Host "`n‚ö° Test 6: V√©rification des stores modifi√©s..." -ForegroundColor Yellow
$storeFiles = @(
    "src/stores/useMessageStore.ts",
    "src/stores/useFavoritesStore.ts",
    "src/stores/useOrderStore.ts",
    "src/stores/useListingStore.ts"
)

$modifiedStores = 0
foreach ($store in $storeFiles) {
    if (Test-Path $store) {
        $content = Get-Content $store -Raw
        if ($content -match "orderBy" -and $content -match "limit") {
            Write-Host "‚úÖ Store optimis√©: $store" -ForegroundColor Green
            $modifiedStores++
        } else {
            Write-Host "‚ùå Store non optimis√©: $store" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Store manquant: $store" -ForegroundColor Red
    }
}

if ($modifiedStores -eq $storeFiles.Count) {
    Write-Host "‚úÖ Tous les stores sont optimis√©s" -ForegroundColor Green
    $testResults.Performance = $true
} else {
    Write-Host "‚ö†Ô∏è $modifiedStores/$($storeFiles.Count) stores optimis√©s" -ForegroundColor Yellow
}

# R√©sum√© des tests
Write-Host "`nüìä R√âSUM√â DES TESTS" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan

$passedTests = ($testResults.Values | Where-Object { $_ -eq $true }).Count
$totalTests = $testResults.Count

Write-Host "Tests pass√©s: $passedTests/$totalTests" -ForegroundColor White

if ($testResults.Firebase) {
    Write-Host "‚úÖ Firebase CLI: OK" -ForegroundColor Green
} else {
    Write-Host "‚ùå Firebase CLI: √âCHEC" -ForegroundColor Red
}

if ($testResults.Supabase) {
    Write-Host "‚úÖ Supabase CLI: OK" -ForegroundColor Green
} else {
    Write-Host "‚ùå Supabase CLI: √âCHEC" -ForegroundColor Red
}

if ($testResults.Performance) {
    Write-Host "‚úÖ Stores optimis√©s: OK" -ForegroundColor Green
} else {
    Write-Host "‚ùå Stores optimis√©s: √âCHEC" -ForegroundColor Red
}

if ($testResults.Validation) {
    Write-Host "‚úÖ Fichiers de correction: OK" -ForegroundColor Green
} else {
    Write-Host "‚ùå Fichiers de correction: √âCHEC" -ForegroundColor Red
}

# Recommandations
Write-Host "`nüéØ RECOMMANDATIONS" -ForegroundColor Magenta
Write-Host "==================" -ForegroundColor Magenta

if ($passedTests -eq $totalTests) {
    Write-Host "üéâ Tous les tests sont pass√©s !" -ForegroundColor Green
    Write-Host "Votre plateforme est pr√™te pour le d√©ploiement." -ForegroundColor Green
    Write-Host "`nProchaines √©tapes:" -ForegroundColor Yellow
    Write-Host "1. D√©ployer les index Firebase: firebase deploy --only firestore:indexes" -ForegroundColor White
    Write-Host "2. Configurer les variables d'environnement Supabase" -ForegroundColor White
    Write-Host "3. D√©ployer les fonctions Supabase: supabase functions deploy" -ForegroundColor White
} else {
    Write-Host "‚ö†Ô∏è Certains tests ont √©chou√©." -ForegroundColor Yellow
    Write-Host "Consultez le guide d'installation: INSTALLATION-PREREQUIS.md" -ForegroundColor White
    Write-Host "Consultez le guide de d√©ploiement: DEPLOIEMENT-MANUEL.md" -ForegroundColor White
}

Write-Host "`nüìã Fichiers de r√©f√©rence cr√©√©s:" -ForegroundColor Cyan
Write-Host "- INSTALLATION-PREREQUIS.md" -ForegroundColor White
Write-Host "- DEPLOIEMENT-MANUEL.md" -ForegroundColor White
Write-Host "- test-corrections.html" -ForegroundColor White
Write-Host "- GUIDE-DEPLOIEMENT-CORRECTIONS.md" -ForegroundColor White

Write-Host "`nTest termine !" -ForegroundColor Green
