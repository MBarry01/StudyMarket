// Test sp√©cifique pour identifier le r√¥le utilis√©
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://kbbhglxrcywpcktkamhl.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtiYmhnbHhyY3l3cGNrdGthbWhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxNTg5MTUsImV4cCI6MjA2NDczNDkxNX0.I8Lj0SuxxMeabmCc3IZ0ZGH_z44CJFLGExny8WA1q4A';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testRoleIdentification() {
  console.log('üîç TEST D\'IDENTIFICATION DU R√îLE');
  console.log('=================================');
  console.log('');

  // Test 1: V√©rifier le r√¥le actuel
  console.log('1Ô∏è‚É£ Test du r√¥le actuel...');
  try {
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    console.log('Session:', sessionData);
    console.log('Erreur session:', sessionError);
    
    if (sessionData.session) {
      console.log('‚úÖ Utilisateur authentifi√©');
      console.log('User ID:', sessionData.session.user?.id);
    } else {
      console.log('‚úÖ Utilisateur anonyme (anon)');
    }
  } catch (err) {
    console.log('‚ùå Erreur session:', err.message);
  }

  // Test 2: Test d'insertion avec diagnostic d√©taill√©
  console.log('');
  console.log('2Ô∏è‚É£ Test d\'insertion avec diagnostic...');
  try {
    const { data, error } = await supabase
      .from('contact_logs')
      .insert([{
        name: 'Test R√¥le',
        email: 'test@studymarket.com',
        subject: 'Test Identification R√¥le',
        message: 'Test pour identifier le r√¥le utilis√© par le client Supabase'
      }])
      .select();
    
    if (error) {
      console.log('‚ùå Erreur d\'insertion:', error.message);
      console.log('‚ùå Code d\'erreur:', error.code);
      console.log('‚ùå D√©tails:', error.details);
      console.log('‚ùå Hint:', error.hint);
      
      console.log('');
      console.log('üîç ANALYSE :');
      console.log('   - Le client utilise probablement le r√¥le "anon"');
      console.log('   - La politique "allow_anon_insert_contact_logs" devrait permettre l\'insertion');
      console.log('   - Probl√®me possible : conflit avec d\'autres politiques');
      
      console.log('');
      console.log('üîß SOLUTION ALTERNATIVE :');
      console.log('1. D√©sactiver temporairement RLS pour tester :');
      console.log('   ALTER TABLE public.contact_logs DISABLE ROW LEVEL SECURITY;');
      console.log('');
      console.log('2. Ou cr√©er une politique plus permissive :');
      console.log('   CREATE POLICY "Allow all insert" ON public.contact_logs FOR INSERT TO public WITH CHECK (true);');
      
    } else {
      console.log('‚úÖ Insertion r√©ussie !');
      console.log('‚úÖ ID:', data[0]?.id);
      
      // Nettoyer
      await supabase
        .from('contact_logs')
        .delete()
        .eq('id', data[0]?.id);
      
      console.log('‚úÖ Test nettoy√©');
    }
  } catch (err) {
    console.log('‚ùå Erreur lors de l\'insertion:', err.message);
  }

  // Test 3: V√©rifier les politiques actuelles
  console.log('');
  console.log('3Ô∏è‚É£ Recommandation pour v√©rifier les politiques...');
  console.log('Ex√©cuter dans Supabase Dashboard :');
  console.log('');
  console.log('```sql');
  console.log('SELECT policyname, roles, cmd, qual, with_check');
  console.log('FROM pg_policies');
  console.log('WHERE tablename = \'contact_logs\';');
  console.log('```');
  console.log('');
  console.log('4Ô∏è‚É£ Solution de contournement temporaire :');
  console.log('```sql');
  console.log('-- D√©sactiver RLS temporairement pour tester');
  console.log('ALTER TABLE public.contact_logs DISABLE ROW LEVEL SECURITY;');
  console.log('');
  console.log('-- Ou cr√©er une politique tr√®s permissive');
  console.log('CREATE POLICY "Allow all insert contact_logs"');
  console.log('ON public.contact_logs FOR INSERT TO public WITH CHECK (true);');
  console.log('```');
}

testRoleIdentification().catch(console.error);
