# Script pour configurer Firebase Admin automatiquement

Write-Host "üîß Configuration Firebase Admin pour StudyMarket" -ForegroundColor Cyan
Write-Host ""

# V√©rifier si le fichier de cl√© existe
$serviceAccountPath = Read-Host "Entrez le chemin complet du fichier JSON de service Firebase (ou appuyez sur Entr√©e pour le chercher dans le dossier actuel)"

if ([string]::IsNullOrWhiteSpace($serviceAccountPath)) {
    $serviceAccountPath = Get-ChildItem -Path . -Filter "*firebase*adminsdk*.json" -File | Select-Object -First 1 -ExpandProperty FullName
}

if (-not $serviceAccountPath -or -not (Test-Path $serviceAccountPath)) {
    Write-Host "‚ùå Fichier de cl√© Firebase non trouv√©" -ForegroundColor Red
    Write-Host ""
    Write-Host "üìù √âtapes pour obtenir la cl√© :" -ForegroundColor Yellow
    Write-Host "1. Allez sur https://console.firebase.google.com/"
    Write-Host "2. S√©lectionnez 'annonces-app-44d27'"
    Write-Host "3. Param√®tres > Comptes de service"
    Write-Host "4. Cliquez sur 'G√©n√©rer une nouvelle cl√© priv√©e'"
    Write-Host "5. T√©l√©chargez le fichier JSON et placez-le dans ce dossier"
    Write-Host "6. Relancez ce script"
    exit 1
}

Write-Host "‚úÖ Fichier trouv√© : $serviceAccountPath" -ForegroundColor Green

# Lire le contenu JSON
$jsonContent = Get-Content $serviceAccountPath -Raw | ConvertFrom-Json

# Cr√©er le JSON en une seule ligne avec √©chappement
$jsonOneLine = @{
    "type" = $jsonContent.type
    "project_id" = $jsonContent.project_id
    "private_key_id" = $jsonContent.private_key_id
    "private_key" = $jsonContent.private_key
    "client_email" = $jsonContent.client_email
    "client_id" = $jsonContent.client_id
    "auth_uri" = $jsonContent.auth_uri
    "token_uri" = $jsonContent.token_uri
    "auth_provider_x509_cert_url" = $jsonContent.auth_provider_x509_cert_url
    "client_x509_cert_url" = $jsonContent.client_x509_cert_url
} | ConvertTo-Json -Compress

# √âchapper les caract√®res sp√©ciaux pour .env
$escapedJson = $jsonOneLine -replace '\\n', '\\n' -replace '"', '\"'

# Lire le .env actuel
$envContent = Get-Content .env -Raw

# V√©rifier si FIREBASE_SERVICE_ACCOUNT existe d√©j√†
if ($envContent -match 'FIREBASE_SERVICE_ACCOUNT=') {
    # Remplacer l'ancienne valeur
    $envContent = $envContent -replace 'FIREBASE_SERVICE_ACCOUNT=.*', "FIREBASE_SERVICE_ACCOUNT=$escapedJson"
    Write-Host "‚úÖ FIREBASE_SERVICE_ACCOUNT mis √† jour dans .env" -ForegroundColor Green
} else {
    # Ajouter la nouvelle valeur
    $envContent += "`n`n# Firebase Admin SDK (Service Account)`nFIREBASE_SERVICE_ACCOUNT=$escapedJson"
    Write-Host "‚úÖ FIREBASE_SERVICE_ACCOUNT ajout√© √† .env" -ForegroundColor Green
}

# Sauvegarder le .env
Set-Content .env -Value $envContent -NoNewline

Write-Host ""
Write-Host "‚úÖ Configuration termin√©e !" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ Prochaines √©tapes :" -ForegroundColor Cyan
Write-Host "1. Arr√™tez le serveur (Ctrl+C)"
Write-Host "2. Red√©marrez-le : node server.js"
Write-Host "3. V√©rifiez que vous voyez : '‚úÖ Firebase Admin initialis√©'"
Write-Host "4. Testez un paiement"
Write-Host "5. V√©rifiez vos commandes dans la page 'Mes Commandes'"
Write-Host ""





